<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\Exam;
use App\Models\Question;
use Illuminate\Http\Request;

class QuestionController extends Controller
{
    public function index(Exam $exam)
    {
        $questions = $exam->questions;
        $currentCount = $questions->count(); // s·ªë c√¢u hi·ªán c√≥
        $maxCount = $exam->total_questions; // s·ªë c√¢u t·ªëi ƒëa

        return view('admin.questions.index', compact('exam', 'questions', 'currentCount', 'maxCount'));
    }


    public function create(Exam $exam)
    {
        return view('admin.questions.create', compact('exam'));
    }

   public function store(Request $request, Exam $exam)
    {
        // üîí Ki·ªÉm tra gi·ªõi h·∫°n c√¢u h·ªèi
        $currentCount = $exam->questions()->count();
        if ($currentCount >= $exam->total_questions) {
            return redirect()
                ->route('admin.exams.questions.index', $exam)
                ->with('error', 'B√†i thi n√†y ƒë√£ ƒë·∫°t s·ªë l∆∞·ª£ng c√¢u h·ªèi t·ªëi ƒëa.');
        }

        // ‚úÖ Validate d·ªØ li·ªáu
        $data = $request->validate([
            'type' => 'required|in:multiple_choice,essay',
            'question_text' => 'required|string',
            'options' => 'nullable|array',
            'correct_answer' => 'nullable|string',
        ]);

        $data['exam_id'] = $exam->id;

        if ($data['type'] === 'multiple_choice') {
            // lo·∫°i b·ªè c√°c l·ª±a ch·ªçn tr·ªëng
            $options = array_filter($request->input('options', []), fn($opt) => !empty($opt));

            // l∆∞u l·∫°i th√†nh JSON chu·∫©n
            $data['options'] = json_encode(array_values($options));
        } else {
            // n·∫øu l√† t·ª± lu·∫≠n ‚Üí kh√¥ng c·∫ßn options
            $data['options'] = null;
            $data['correct_answer'] = null;
        }


        Question::create($data);

        return redirect()
            ->route('admin.exams.questions.index', $exam)
            ->with('success', 'Th√™m c√¢u h·ªèi th√†nh c√¥ng!');
    }


    public function edit(Exam $exam, Question $question)
    {
        return view('admin.questions.edit', compact('exam', 'question'));
    }

    public function update(Request $request, Exam $exam, Question $question)
    {
        $data = $request->validate([
            'type' => 'required|in:multiple_choice,essay',
            'question_text' => 'required|string',
            'options' => 'nullable|array',
            'correct_answer' => 'nullable|string',
        ]);

        if ($data['type'] === 'multiple_choice') {
        // lo·∫°i b·ªè c√°c l·ª±a ch·ªçn tr·ªëng
        $options = array_filter($request->input('options', []), fn($opt) => !empty($opt));

        // l∆∞u l·∫°i th√†nh JSON chu·∫©n
        $data['options'] = json_encode(array_values($options));
        } else {
            // n·∫øu l√† t·ª± lu·∫≠n ‚Üí kh√¥ng c·∫ßn options
            $data['options'] = null;
            $data['correct_answer'] = null;
        }


        $question->update($data);

        return redirect()->route('admin.exams.questions.index', $exam)
            ->with('success', 'C·∫≠p nh·∫≠t c√¢u h·ªèi th√†nh c√¥ng!');
    }

    public function destroy(Exam $exam, Question $question)
    {
        $question->delete();

        return redirect()->route('admin.exams.questions.index', $exam)
            ->with('success', 'X√≥a c√¢u h·ªèi th√†nh c√¥ng!');
    }
}
